# -*- mode: org; org-confirm-babel-evaluate: nil; org-babel-noweb-wrap-start: "«"; org-babel-noweb-wrap-end: "»"; -*-

#+TITLE: How to Setup Literate DevOps Pipelines using GitLab Inside of Docker Container

* Summary

** Instructionss

To complete this tutorial successfully, please follow all steps in the order presented of each section listed below:
- Requirements
- Download and Configure GitLab-CE Docker Container
- Create New =org-mode= File

* Requirements

** Instructions

1. Download, Install, and Configure Docker Software

   Unfortunately, this requirement is beyond the scope of this =How-To= tutorial.

   #+begin_quote
     *Note:* The version of docker used in this tutorial is =2.0.0.3 (31259)=
   #+end_quote

* Download and Configure GitLab-CE Docker Container

GitLab provides official docker images for many of their products[fn:1], including GitLab-CE[fn:2].

** Instructions

1. Start Docker application, if needed.

2. Download GitLab-CE Docker Container

   #+name: download-gitlab-ce-docker-image-cmd
   #+begin_src shell :results verbatim replace :eval never :exports both 
     docker pull gitlab/gitlab-ce
   #+end_src

   The output from the command should similar to the example below:

   #+RESULTS: download-gitlab-ce-docker-image-cmd
   #+begin_example
   Using default tag: latest
   latest: Pulling from gitlab/gitlab-ce
   7b722c1070cd: Pulling fs layer
   5fbf74db61f1: Pulling fs layer
   ed41cb72e5c9: Pulling fs layer
   7ea47a67709e: Pulling fs layer
   8425a04e3f5e: Pulling fs layer
   8205329d9f24: Pulling fs layer
   9b5606a820ea: Pulling fs layer
   ea1e37360d76: Pulling fs layer
   e93c2efd9a17: Pulling fs layer
   de310b095c6b: Pulling fs layer
   7ea47a67709e: Waiting
   8425a04e3f5e: Waiting
   8205329d9f24: Waiting
   9b5606a820ea: Waiting
   ea1e37360d76: Waiting
   e93c2efd9a17: Waiting
   de310b095c6b: Waiting
   ed41cb72e5c9: Verifying Checksum
   ed41cb72e5c9: Download complete
   5fbf74db61f1: Download complete
   7ea47a67709e: Verifying Checksum
   7ea47a67709e: Download complete
   8205329d9f24: Verifying Checksum
   8205329d9f24: Download complete
   9b5606a820ea: Verifying Checksum
   9b5606a820ea: Download complete
   ea1e37360d76: Verifying Checksum
   ea1e37360d76: Download complete
   e93c2efd9a17: Download complete
   7b722c1070cd: Verifying Checksum
   7b722c1070cd: Download complete
   7b722c1070cd: Pull complete
   5fbf74db61f1: Pull complete
   ed41cb72e5c9: Pull complete
   7ea47a67709e: Pull complete
   8425a04e3f5e: Verifying Checksum
   8425a04e3f5e: Download complete
   8425a04e3f5e: Pull complete
   8205329d9f24: Pull complete
   9b5606a820ea: Pull complete
   ea1e37360d76: Pull complete
   e93c2efd9a17: Pull complete
   de310b095c6b: Verifying Checksum
   de310b095c6b: Download complete
   de310b095c6b: Pull complete
   Digest: sha256:9827a7f23aa9ec5310fcc4c97fddc9777ba467c61e7d7a009ec5c372a26eb0ac
   Status: Downloaded newer image for gitlab/gitlab-ce:latest
   #+end_example

3. Create local directories to map to paths inside the Gitlab-Ce container.

   For example, in this tutorial the following directories will need to be created under the tutorial directory.

   #+name: gitlab-ce-local-directory-mappings
   | Local-Path          | Container-Path  |
   |---------------------+-----------------|
   | ./srv/gitlab/config | /etc/gitlab     |
   | ./srv/gitlab/logs   | /var/log/gitlab |
   | ./srv/gitlab/data   | /var/opt/gitlab |

   - For Unix, Linux and MacOS users

     #+name: create-gitlab-ce-local-directories-cmd
     #+begin_src ruby :var cmd="mkdir -p" :var cmd_msg="Create Local GitLab Directories on Unix, Linux and MacOS" :var data=gitlab-ce-local-directory-mappings :wrap "src shell :eval never" :exports results 
      "  # %s\n  %s %s;" % [cmd_msg,cmd,data.map{|d| d[0]}.join(' ')]
     #+end_src

     #+RESULTS: create-gitlab-ce-local-directories-cmd
     #+begin_src shell :eval never
       # Create Local GitLab Directories on Unix, Linux and MacOS
       mkdir -p ./srv/gitlab/config ./srv/gitlab/logs ./srv/gitlab/data;
     #+end_src

     #+begin_quote
       *Note:* The directory mappings for this tutorial were derived directly the instructions provided by GitLab[fn:3].
     #+end_quote

4. Map local network ports to default ports inside GitLaB-CE container.
 
   The table below contains the network port mappings that will be used for the GitLab-CE container.

   #+name: gitlab-ce-local-port-mappings
   | Local-Port | Container-Port |
   |------------+----------------|
   |        443 |            443 |
   |         80 |             80 |
   |         22 |             22 |

5. Verify that local ports are not in use before running the docker container.
   
   #+name: verify-gitlab-ce-local-port-not-in-use-msg
   #+begin_src ruby :var data=gitlab-ce-local-port-mappings :exports results  :results raw replace 
     "#+begin_quote\n  *Note:* For this tutorial, we need to verify that network ports =%s=, =%s= and =%s= are not in use.\n#+end_quote\n" % data.map{|d| d[0]}
   #+end_src

   #+RESULTS: verify-gitlab-ce-local-port-not-in-use-msg
   #+begin_quote
     *Note:* For this tutorial, we need to verify that network ports =443=, =80= and =22= are not in use.
   #+end_quote

   The following example script may be used to verify that the network ports are not in use.
 
   - For Unix, Linux and MacOS users

     #+name: verify-gitlab-ce-local-port-not-in-use-cmd
     #+begin_src ruby :var cmd_msg="Verify Local GitLab Ports on Unix, Linux and MacOS" :var data=gitlab-ce-local-port-mappings :exports results :results replace :wrap "src shell :eval never"
       verify_cmd = %q{  # %s
         for port in %s; do
             if [ "0" = `netstat -an | grep -i 'tcp' | grep -i listen | grep -E "([*]|127.0.0.1)\.$port" | wc -l;` ]; then
                 echo "$port OK";
             else
                 echo "$port CHOOSE_AGAIN";
             fi
         done
       } % [cmd_msg,data.map{|d| d[0]}.join(' ')]

       verify_cmd
     #+end_src

     #+RESULTS: verify-gitlab-ce-local-port-not-in-use-cmd
     #+begin_src shell :eval never
       # Verify Local GitLab Ports on Unix, Linux and MacOS
       for port in 443 80 22; do
           if [ "0" = `netstat -an | grep -i 'tcp' | grep -i listen | grep -E "([*]|127.0.0.1)\.$port" | wc -l;` ]; then
               echo "$port OK";
           else
               echo "$port IN_USE";
           fi
       done
     #+end_src

     The output of the example script should be similar to the example below:

     #+name: verify-gitlab-ce-local-port-not-in-use-cmd-ex1
     #+begin_src shell :exports results :noweb yes :results verbatim replace 
       «verify-gitlab-ce-local-port-not-in-use-cmd()»
     #+end_src

     #+RESULTS: verify-gitlab-ce-local-port-not-in-use-cmd-ex1
     : 443 OK
     : 80 OK
     : 22 OK

     #+begin_quote
       *Important:* If the output from the example script shows any of the network ports are already in use, then you will need to pick new port numbers and manually adjust the port numbers in the ~docker run~ command parameters which are specified in future tutorial steps. This workaround for your specific network setup should allow the tutorial to continue.
     #+end_quote

* Create New org-mode File

1. Create a new =org-mode= file using =Emacs=.

   For this tutorial, the filename will be =setup-pipelines.org=

   - To create the file in Emacs do the following: 
     1. Press the key chords ~C-x~ ~C-f~
     2. Type =setup-pipelines.org=
     3. Press ~Return~ or ~Enter~ key

2. Add ~mode~ line to top of the file.
   
   #+NAME: mode-line
   #+BEGIN_SRC org
     # -*- mode: org; org-confirm-babel-evaluate: nil; org-babel-noweb-wrap-start: "«"; org-babel-noweb-wrap-end: "»"; -*-
   #+END_SRC

   #+BEGIN_QUOTE 
     *TIP:* To insert =«= press key chord ~C-x~ ~8~ ~<~ and to insert =»= press key chord ~C-x~ ~8~ ~>~ 
   #+END_QUOTE

   -----

   #+begin_quote 
     *FAQ:* Why did you customize the values for =org-babel-noweb-wrap-start= and =org-babel-noweb-wrap-end=?  

     *Answer:* The default values for =org-babel-noweb-wrap-start= and =org-babel-noweb-wrap-end= collide with the operators of some common programming languages. These collisions can break the syntax highlighting and interfere with code maintenance.
   #+end_quote

3. Add /Utility Code/ Section to end of file.
   
   #+NAME: utility-code
   #+BEGIN_SRC org
     ,* Utility Code                                            :noexport:
   #+END_SRC

4. Add /Common Export Settings/ Section to end of the file.

   #+NAME: common-export-settings
   #+BEGIN_SRC org
     ,* Common Export Settings                                           :noexport:

     ,#+OPTIONS: ':nil *:t -:t ::t <:nil H:4 \n:nil ^:{} arch:headline
     ,#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
     ,#+OPTIONS: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
     ,#+OPTIONS: p:nil pri:nil prop:t stat:nil tags:t tasks:nil tex:t
     ,#+OPTIONS: timestamp:nil title:nil toc:nil todo:nil |:t
     ,#+SELECT_TAGS: export
     ,#+EXCLUDE_TAGS: noexport

     # For Display when file is exported with org-ruby 

     ,#+EXPORT_SELECT_TAGS: export
     ,#+EXPORT_EXCLUDE_TAGS: noexport
   #+END_SRC

5. Save the file in =Emacs=.

   - To save the file in Emacs do the following: 
     1. Press the key chords ~C-x~ ~C-s~

** Self Check - Example 1

After completing the instructions in this section, the contents of journal-template.org should be similar to [[file:self-check-example-01.org][self-check-example-01.org]].

#+BEGIN_SRC org :tangle self-check-example-01.org :noweb yes :exports none 
  «mode-line»

  «utility-code»
  «common-export-settings»
#+END_SRC

* Common Export Settings                                           :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:nil H:4 \n:nil ^:{} arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:t stat:nil tags:t tasks:nil tex:t
#+OPTIONS: timestamp:nil title:nil toc:nil todo:nil |:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# For Display when file is exported with org-ruby 

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Footnotes

[fn:3] https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/docker/README.md

[fn:2] https://hub.docker.com/r/gitlab/gitlab-ce/ 

[fn:1] https://docs.gitlab.com/ee/install/docker.html 
