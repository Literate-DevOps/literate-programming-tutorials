# -*- mode: org; org-confirm-babel-evaluate: nil; org-babel-noweb-wrap-start: "«"; org-babel-noweb-wrap-end: "»"; -*-

#+TITLE: Ansible with Literate DevOps Tutorial


* Summary                                                          

This tutorial provides a step by step guide on how to use =ansible=[fn:1] with Literate DevOps. 

** Instructions

To complete this tutorial successfully, please follow all steps in the order presented of each section listed below:
- Requirements
- Create New =org-mode= File

* Requirements

#+BEGIN_QUOTE
  *Note:* All the requirements /must/ be completed successfully before continuing with the steps in this tutorial.
#+END_QUOTE

** Instructions

1. Download, Install, and Configure =ansible= Software

   Unfortunately, this requirement is beyond the scope of this tutorial.

2. Download, Install, and Configure =Emacs= Software

   Unfortunately, this requirement is beyond the scope of this tutorial.

3. Download, Install, and Configure =org-mode= Software

   #+BEGIN_QUOTE
     *Note:* The =org-mode= application is already installed if you are using a recent version of =Emacs=, i.e. versions 25 or greater.
   #+END_QUOTE

   Unfortunately, this requirement is beyond the scope of this tutorial.

4. Validate =Emacs=, =org-mode= and =gnupg= are configured to work together.

   Unfortunately, this requirement is beyond the scope of this tutorial.

* Create New org-mode File

** Instructions

1. Create a new =org-mode= file using =Emacs=.

   For this tutorial, the filename will be =tutorial-example1.org=

   - To create the file in Emacs do the following: 
     1. Press the key chords ~C-x~ ~C-f~
     2. Type =tutorial-example1.org=
     3. Press ~Return~ or ~Enter~ key

2. Add ~mode~ line to top of the file.
   
   #+NAME: mode-line
   #+BEGIN_SRC org
     # -*- mode: org; org-confirm-babel-evaluate: nil; org-babel-noweb-wrap-start: "«"; org-babel-noweb-wrap-end: "»"; -*-
   #+END_SRC

   #+BEGIN_QUOTE 
     *TIP:* To insert =«= press key chord ~C-x~ ~8~ ~<~ and to insert =»= press key chord ~C-x~ ~8~ ~>~ 
   #+END_QUOTE

3. Add /Utility Code/ Section to end of file.
   
   #+NAME: utility-code
   #+BEGIN_SRC org
     ,* Utility Code                                            :noexport:

   #+END_SRC

4. Add /Common Export Settings/ Section to end of the file.

   #+NAME: common-export-settings
   #+BEGIN_SRC org
     ,* Common Export Settings                                           :noexport:

     ,#+OPTIONS: ':nil *:t -:t ::t <:nil H:4 \n:nil ^:{} arch:headline
     ,#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
     ,#+OPTIONS: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
     ,#+OPTIONS: p:nil pri:nil prop:t stat:nil tags:t tasks:nil tex:t
     ,#+OPTIONS: timestamp:nil title:nil toc:nil todo:nil |:t
     ,#+SELECT_TAGS: export
     ,#+EXCLUDE_TAGS: noexport nolatex

     # For Display when file is exported with org-ruby 

     ,#+EXPORT_SELECT_TAGS: export
     ,#+EXPORT_EXCLUDE_TAGS: noexport
   #+END_SRC

5. Save the file in =Emacs=.

   - To save the file in Emacs do the following: 
     1. Press the key chords ~C-x~ ~C-s~

** Self Check - Example 1

After completing the instructions in this section, the contents of =tutorial-example1.org= should be similar to [[file:self-check-example-01.org][self-check-example-01.org]].

#+BEGIN_SRC org :tangle self-check-example-01.org :noweb yes :exports none 
  «mode-line»

  «utility-code»
  «common-export-settings»
#+END_SRC

* Common Export Settings                                           :noexport:

#+OPTIONS: ':nil *:t -:t ::t <:nil H:4 \n:nil ^:{} arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:t stat:nil tags:t tasks:nil tex:t
#+OPTIONS: timestamp:nil title:nil toc:nil todo:nil |:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport nolatex

# For Display when file is exported with org-ruby 

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Raw Training Notes

From Ansible Workshop 2019/11/07 by Sirius[fn:2] sponsored RedHat[fn:3] 

** Intro 

User -> Playbooks -> Ansible software ->  Infrastructure(?)

- Users
  Write Playbooks
  - Playbooks
    Call features of Open Source Ansible engine
    - inventory
    - plugins
    - Modules
      - git
      - Package
      - get_url
      - copy
      - cloudformation
      - azure_rm_resource
      - vmware_guest
      - aci_rest
    - API[fn:4] (Ansible Tower[fn:5] project wraps around the Open Source Ansible engine)

** Lab Infrastructure Automation 

http://tower.mysidlabs.com
https://github.com/fiveout

fork https://github.com/fiveout/mysidlab-infra

- projects :: pointer to source reposity of ansible artifacts?
- templates :: templates for jobs 

Open Source AWX has similar UI to Tower interface

*** Repo

https://github.com/Questions-and-Answers/mysidlab-infra

file:./repos

*** Tips 

- Use instance groups to scale horizontally (Matt)
- Playbooks act on facts?

*** References

https://docs.ansible.com/ansible/latest/dev_guide/developing_api.html
https://docs.ansible.com/

* Utility Code 

** Creating yaml from a Properties Table



#+NAME: example1-data
| property-name           | property-value                       |
|-------------------------+--------------------------------------|
| job00(0)                | echo "Hello World!"                  |
| job00(1)                | echo "Howdy Terra!"                  |
| job01.stage             | test                                 |
| job01.artifact.paths(0) | my-scripts                           |
| job01.artifact.paths(1) | my-code                              |
| job01.environment.name  | env-name                             |
| job01.environment.url   | https://example.com                  |
| job01.script(0)         | echo "For example run a lint test"   |
| job01.script(1)         | echo "Do another parallel test here" |
| job01.only(0)           | only-on-branch                       |
| job02(0)                | echo "Hello Again!"                  |
| job03(0)                | echo "Index at 12?"                  |


#+NAME: ruby/properties-to-yaml
#+BEGIN_SRC ruby :var data=example1-data :exports both 
  require 'yaml'

  def get_hash (txt, value , delim=".")

    if txt.is_a? String and txt =~ /[(]\d+[)]/
        b = txt.split(/[()]/,3)

        c = Array.new 
        c[b[1].to_i] = value

        if b.is_a? Array and not b[0].nil? and b[0].include?(".")
          get_hash(b[0], c)
        else
          [[[b[0],c]].to_h]
        end
    else
      #
      # just hash and No array
      #
      a = txt.split('.', 2)

      if a.is_a? Array and not a[1].nil? and a[1].include?(".")
         [[[a[0], get_hash(a[1],value)[0]]].to_h]
      else
        [[[a[0], [[a[1], value]].to_h]].to_h]
      end
    end

  end

  def merge_recursively(a, b)
    a.merge(b) {|key, a_item, b_item|
      if a_item.kind_of?(Hash) and b_item.kind_of?(Hash)
        merge_recursively(a_item, b_item) 
      elsif a_item.kind_of?(Array) and b_item.kind_of?(Array)
        a_item + b_item.compact
      else
        b_item
      end
      }
  end

  h = Hash.new  

  data.map{|d| 
    r = get_hash(d[0],d[1])
    h = merge_recursively(h,r[0])

  }

  h.to_yaml
  my_yaml = h.to_yaml
  my_yaml.gsub(/( *- )/,"  \\1")

#+END_SRC

#+RESULTS: ruby/properties-to-yaml
#+begin_example
---
job00:
  - echo "Hello World!"
  - echo "Howdy Terra!"
job01:
  stage: test
  artifact:
    paths:
      - my-scripts
      - my-code
  environment:
    name: env-name
    url: https://example.com
  script:
    - echo "For example run a lint test"
    - echo "Do another parallel test here"
  only:
    - only-on-branch
job02:
  - echo "Hello Again!"
job03:
  - echo "Index at 12?"
#+end_example
* Footnotes

[fn:5] https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html 

[fn:4] https://docs.ansible.com/ansible/latest/api/index.html

[fn:3] https://www.redhat.com/en 

[fn:2] https://www.siriuscom.com/ 

[fn:1] https://www.ansible.com/
